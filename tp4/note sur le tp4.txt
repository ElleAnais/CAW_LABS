tp4 caw :

 JEST 

cours :

L'objectif de ce tutoriel est de comprendre comment exécuter des tests unitaires sur les modules JavaScript en utilisant Jest, un framework de tests unitaires basé sur JavaScript.

1. Qu'est-ce que Jest ?
Jest est un framework de tests JavaScript développé par Facebook, conçu principalement pour les applications basées sur React (qui est également développé par Facebook). Jest est destiné à garantir la correction et la fiabilité des bases de code JavaScript. Il offre une API conviviale et riche en fonctionnalités qui permet aux développeurs d'écrire des tests complets avec facilité. La popularité de Jest découle de sa simplicité, de son efficacité et de son adaptabilité à divers environnements JavaScript.

2. Pourquoi Jest est-il important ?
Les tests jouent un rôle crucial dans le développement logiciel, garantissant que le code fonctionne comme prévu et répond aux exigences souhaitées. Jest simplifie le processus de test, en faisant un outil essentiel pour les développeurs JavaScript.

Voici quelques raisons clés pour lesquelles Jest est important :
- Amélioration de la qualité du code : Jest aide les développeurs à écrire un code de haute qualité en identifiant et en prévenant les bugs dès le début du processus de développement.
- Réduction du temps de développement : L'exécution efficace des tests par Jest fournit des retours rapides, permettant aux développeurs de résoudre rapidement les problèmes, économisant ainsi du temps et des efforts.
- Augmentation de la confiance dans le code : Des tests complets avec Jest inspirent confiance dans la fiabilité du code, réduisant le risque de défaillances inattendues en production.
- Amélioration de la maintenabilité : Un code bien testé est plus facile à comprendre et à maintenir, réduisant la charge pour les développeurs futurs.


3. Installation et utilisation de Jest

La mise en route avec Jest est simple. Suivez ces étapes pour installer et utiliser Jest :

1. Installer Jest : Installez Jest à l'aide de npm :
```bash
npm install --save-dev jest
```

2. Créer des fichiers de test : Créez des fichiers de test avec l'extension .test.js ou .test.jsx à côté des fichiers JavaScript ou des composants React correspondants.

3. Écrire des cas de test : Utilisez la bibliothèque d'assertions de Jest pour écrire des cas de test qui vérifient le comportement attendu de votre code.

4. Exécuter les tests : Lancez les tests à l'aide de l'interface de ligne de commande de Jest :
```bash
jest
```

Jest exécutera les tests et fournira des résultats détaillés, indiquant tout échec ou comportement inattendu.

Bien sûr, je vais détailler les étapes pour installer et utiliser Jest.

1. **Installer Jest :**
   Utilisez npm (Node Package Manager) pour installer Jest. Ouvrez votre terminal et exécutez la commande suivante dans le répertoire de votre projet :

   ```bash
   npm install --save-dev jest
   ```

   Cette commande installe Jest en tant que dépendance de développement dans votre projet.

2. **Créer des fichiers de test :**
   - Créez des fichiers de test avec l'extension `.test.js` ou `.test.jsx`. Ces fichiers de test doivent être situés à côté des fichiers JavaScript ou des composants React que vous souhaitez tester


Exo 1:



Exercice 2 :
Écrivez et testez les cas de test pour chaque fonction ci-dessous :

1. Les premiers n éléments d'un tableau.
```javascript
function first(array, n) {
  if (array == null || n <= 0)
    return [];
  if (n == null)
    return array[0];
  return array.slice(0, n);
}
```
**Explication :**
- La fonction `first` prend deux paramètres, un tableau (`array`) et un nombre (`n`).
- Si le tableau est nul ou si `n` est inférieur ou égal à zéro, la fonction renvoie un tableau vide.
- Si `n` est nul, la fonction renvoie le premier élément du tableau.
- Sinon, la fonction renvoie les premiers `n` éléments du tableau.

2. Les derniers n éléments d'un tableau.
```javascript
function last(array, n) {
  if (array == null)
    return [];
  if (n == null)
    return array[array.length - 1];
  return array.slice(Math.max(array.length - n, 0));
}
```
**Explication :**
- La fonction `last` prend deux paramètres, un tableau (`array`) et un nombre (`n`).
- Si le tableau est nul, la fonction renvoie un tableau vide.
- Si `n` est nul, la fonction renvoie le dernier élément du tableau.
- Sinon, la fonction renvoie les derniers `n` éléments du tableau.

3. Chaîne de caractères = la concaténation de tous les éléments d'un tableau de chaînes de caractères.
```javascript
const myColor = ["Red", "Green", "White", "Black"];
console.log(myColor.toString());
console.log(myColor.join());
console.log(myColor.join(''));



solution:

exo 2 tp4 caw


D'accord, commençons par créer un nouveau projet dans un dossier vide. Suivez ces étapes dans le terminal de VSCode ou votre terminal préféré :

**Étape 1: Création d'un nouveau dossier et initialisation du projet**

```bash
mkdir exercice_jest
cd exercice_jest
npm init -y
```

Cette séquence de commandes crée un nouveau dossier appelé "exercice_jest", se déplace dans ce dossier, et initialise un fichier `package.json` avec les valeurs par défaut.

**Étape 2: Installation de Jest**

Installez Jest dans votre projet avec la commande suivante :

```bash
npm install --save-dev jest
```

**Étape 3: Création des fichiers**

Créez deux fichiers dans votre dossier "exercice_jest". Utilisez VSCode ou votre éditeur de texte préféré pour créer ces fichiers.

**`functions.js`**

```javascript
// functions.js

function first(array, n) {
  if (array == null || n <= 0)
    return [];
  if (n == null)
    return array[0];
  return array.slice(0, n);
}

function last(array, n) {
  if (array == null)
    return [];
  if (n == null)
    return array[array.length - 1];
  return array.slice(Math.max(array.length - n, 0));
}

function concatenateStrings(array) {
  return array.join('');
}

function chunk(array, size) {
  var chunkedArr = [];
  var index = 0;
  while (index < array.length) {
    chunkedArr.push(array.slice(index, size + index));
    index += size;
  }
  return chunkedArr;
}

module.exports = { first, last, concatenateStrings, chunk };
```

**`functions.test.js`**

```javascript
// functions.test.js

const { first, last, concatenateStrings, chunk } = require('./functions');

test('first should return the first n elements of an array', () => {
  // Write your test cases for the 'first' function here
});

test('last should return the last n elements of an array', () => {
  // Write your test cases for the 'last' function here
});

test('concatenateStrings should return the concatenation of all elements in an array', () => {
  // Write your test cases for the 'concatenateStrings' function here
});

test('chunk should divide an array into sub-arrays of a predefined size', () => {
  // Write your test cases for the 'chunk' function here
});
```

**Étape 4: Exécution des tests**

Modifiez le fichier `package.json` pour ajouter une commande de test :

```json
"scripts": {
  "test": "jest"
},
```

Ensuite, exécutez la commande suivante dans le terminal pour exécuter vos tests :

```bash
npm test
```

Jest exécutera les tests et affichera les résultats dans le terminal. Vous pouvez maintenant remplir les blocs de test dans `functions.test.js` avec vos propres cas de test pour chaque fonction.


Bien sûr, voici comment vous pourriez écrire la logique de test dans le fichier `functions.test.js`. Je vais fournir des exemples pour chacune des fonctions.

**`functions.test.js`**

```javascript
const { first, last, concatenateStrings, chunk } = require('./functions');

test('first should return the first n elements of an array', () => {
  const array = [1, 2, 3, 4, 5];
  const n = 3;

  const result = first(array, n);

  expect(result).toEqual([1, 2, 3]);
});

test('last should return the last n elements of an array', () => {
  const array = [1, 2, 3, 4, 5];
  const n = 3;

  const result = last(array, n);

  expect(result).toEqual([3, 4, 5]);
});

test('concatenateStrings should return the concatenation of all elements in an array', () => {
  const array = ['Red', 'Green', 'White', 'Black'];

  const result = concatenateStrings(array);

  expect(result).toBe('RedGreenWhiteBlack');
});

test('chunk should divide an array into sub-arrays of a predefined size', () => {
  const array = [1, 2, 3, 4, 5, 6, 7, 8];
  const size = 3;

  const result = chunk(array, size);

  expect(result).toEqual([[1, 2, 3], [4, 5, 6], [7, 8]]);
});
```

Dans ces exemples :

- Pour la fonction `first`, nous vérifions si les trois premiers éléments du tableau sont retournés.
- Pour la fonction `last`, nous vérifions si les trois derniers éléments du tableau sont retournés.
- Pour la fonction `concatenateStrings`, nous vérifions si la concaténation des chaînes du tableau est correcte.
- Pour la fonction `chunk`, nous vérifions si le tableau est correctement divisé en sous-tableaux de taille spécifiée.

Vous pouvez personnaliser ces exemples en fonction des comportements attendus de vos fonctions. Ajoutez des cas de test supplémentaires pour couvrir différents scénarios.

